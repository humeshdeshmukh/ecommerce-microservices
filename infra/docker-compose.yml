# infra/docker-compose.yml
# Local development docker-compose file to run services and required infra.
# - Build each service from services/<service>/ (assumes Dockerfile present)
# - Uses simple internal network names and volumes for persistence
# - For production use Kubernetes + CI pipelines.

version: "3.8"

services:
  # Datastores
  mongo:
    image: mongo:6.0
    container_name: local-mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example

  postgres:
    image: postgres:15
    container_name: local-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: example
      POSTGRES_DB: ecommerce
    volumes:
      - postgres-data:/var/lib/postgresql/data

  redis:
    image: redis:7
    container_name: local-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data

  # Optional: MinIO for object storage (S3 compatible)
  minio:
    image: minio/minio:RELEASE.2025-01-01T00-00-00Z
    container_name: local-minio
    command: server /data
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    ports:
      - "9000:9000"
    volumes:
      - minio-data:/data

  # Event bus: reuse your event-bus/docker-compose.kafka.yml externally,
  # or you can include here if you prefer a single compose file.
  # For brevity we won't re-embed Kafka here; run event-bus/docker-compose.kafka.yml separately.

  # API Gateway (local instance)
  api-gateway:
    build:
      context: ./services/api-gateway
    container_name: api-gateway
    depends_on:
      - auth-service
      - product-service
      - order-service
    ports:
      - "8080:8080"
    environment:
      NODE_ENV: development
      AUTH_SERVICE_URL: http://auth-service:3000
      PRODUCT_SERVICE_URL: http://product-service:3001
      ORDER_SERVICE_URL: http://order-service:3002
      # ... other envs
    networks:
      - ecommerce-net

  # Microservices: use build contexts so changes on local code reflect when you rebuild
  auth-service:
    build:
      context: ./services/auth-service
    container_name: auth-service
    depends_on:
      - mongo
    environment:
      NODE_ENV: development
      MONGO_URI: mongodb://root:example@mongo:27017/auth?authSource=admin
      JWT_SECRET: changeme_local_jwt_secret
    ports:
      - "3000:3000"
    networks:
      - ecommerce-net

  product-service:
    build:
      context: ./services/product-service
    container_name: product-service
    depends_on:
      - mongo
    environment:
      NODE_ENV: development
      MONGO_URI: mongodb://root:example@mongo:27017/products?authSource=admin
    ports:
      - "3001:3000"
    networks:
      - ecommerce-net

  order-service:
    build:
      context: ./services/order-service
    container_name: order-service
    depends_on:
      - postgres
      - redis
    environment:
      NODE_ENV: development
      POSTGRES_URL: postgres://postgres:example@postgres:5432/ecommerce
      REDIS_URL: redis://redis:6379
    ports:
      - "3002:3000"
    networks:
      - ecommerce-net

  cart-service:
    build:
      context: ./services/cart-service
    container_name: cart-service
    depends_on:
      - redis
    environment:
      NODE_ENV: development
      REDIS_URL: redis://redis:6379
    ports:
      - "3003:3000"
    networks:
      - ecommerce-net

  payment-service:
    build:
      context: ./services/payment-service
    container_name: payment-service
    depends_on:
      - postgres
    environment:
      NODE_ENV: development
      POSTGRES_URL: postgres://postgres:example@postgres:5432/ecommerce
      PAYMENT_PROVIDER: mock
    ports:
      - "3004:3000"
    networks:
      - ecommerce-net

  notification-service:
    build:
      context: ./services/notification-service
    container_name: notification-service
    depends_on:
      - mongo
    environment:
      NODE_ENV: development
      MONGO_URI: mongodb://root:example@mongo:27017/notifications?authSource=admin
      KAFKA_BROKER: kafka:29092
    ports:
      - "3005:3000"
    networks:
      - ecommerce-net

volumes:
  mongo-data:
  postgres-data:
  redis-data:
  minio-data:

networks:
  ecommerce-net:
    driver: bridge
