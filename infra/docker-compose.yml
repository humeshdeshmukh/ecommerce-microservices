# infra/docker-compose.yml
# Local development docker-compose file to run all microservices + infra
# Use this for local testing; production uses Kubernetes manifests.

version: "3.8"

services:
  # ============================
  # Datastores
  # ============================
  mongo:
    image: mongo:6.0
    container_name: local-mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongo-data:/data/db

  postgres:
    image: postgres:15
    container_name: local-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: example
      POSTGRES_DB: ecommerce
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

  redis:
    image: redis:7
    container_name: local-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data

  # ============================
  # Kafka & Zookeeper
  # ============================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: local-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: local-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

  # ============================
  # Microservices
  # ============================
  auth-service:
    build:
      context: ./services/auth-service
    container_name: auth-service
    depends_on:
      - mongo
    environment:
      PORT: 3000
      MONGO_URI: mongodb://root:example@mongo:27017/auth?authSource=admin
      JWT_SECRET: changeme
    ports:
      - "3000:3000"
    networks:
      - ecommerce-net

  product-service:
    build:
      context: ./services/product-service
    container_name: product-service
    depends_on:
      - mongo
    environment:
      PORT: 3001
      MONGO_URI: mongodb://root:example@mongo:27017/products?authSource=admin
    ports:
      - "3001:3001"
    networks:
      - ecommerce-net

  order-service:
    build:
      context: ./services/order-service
    container_name: order-service
    depends_on:
      - postgres
      - kafka
    environment:
      PORT: 3002
      POSTGRES_URL: postgres://postgres:example@postgres:5432/ecommerce
      JWT_SECRET: changeme
      KAFKA_BROKER: kafka:9092
    ports:
      - "3002:3002"
    networks:
      - ecommerce-net

  cart-service:
    build:
      context: ./services/cart-service
    container_name: cart-service
    depends_on:
      - redis
    environment:
      PORT: 3003
      REDIS_URL: redis://redis:6379
      JWT_SECRET: changeme
    ports:
      - "3003:3003"
    networks:
      - ecommerce-net

  payment-service:
    build:
      context: ./services/payment-service
    container_name: payment-service
    depends_on:
      - postgres
      - kafka
    environment:
      PORT: 3004
      POSTGRES_URL: postgres://postgres:example@postgres:5432/ecommerce
      JWT_SECRET: changeme
      KAFKA_BROKER: kafka:9092
    ports:
      - "3004:3004"
    networks:
      - ecommerce-net

  notification-service:
    build:
      context: ./services/notification-service
    container_name: notification-service
    depends_on:
      - kafka
    environment:
      PORT: 3005
      KAFKA_BROKER: kafka:9092
      JWT_SECRET: changeme
    ports:
      - "3005:3005"
    networks:
      - ecommerce-net

  api-gateway:
    build:
      context: ./services/api-gateway
    container_name: api-gateway
    depends_on:
      - auth-service
      - product-service
      - order-service
      - cart-service
      - payment-service
      - notification-service
    environment:
      PORT: 8080
      AUTH_SERVICE_URL: http://auth-service:3000
      PRODUCT_SERVICE_URL: http://product-service:3001
      ORDER_SERVICE_URL: http://order-service:3002
      CART_SERVICE_URL: http://cart-service:3003
      PAYMENT_SERVICE_URL: http://payment-service:3004
      NOTIFICATION_SERVICE_URL: http://notification-service:3005
    ports:
      - "8080:8080"
    networks:
      - ecommerce-net

# ============================
# Volumes & Networks
# ============================
volumes:
  mongo-data:
  postgres-data:
  redis-data:

networks:
  ecommerce-net:
    driver: bridge
