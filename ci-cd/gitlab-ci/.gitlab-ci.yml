# .gitlab-ci.yml - GitLab CI for multi-service build & deploy
# Assumptions:
# - Runner has docker-in-docker (dind) or you use a shell runner with docker installed
# - Variables (set in GitLab CI/CD settings or group/project):
#   REGISTRY: registry.example.com/namespace
#   REGISTRY_USERNAME, REGISTRY_PASSWORD OR use CI_REGISTRY, CI_REGISTRY_USER, CI_REGISTRY_PASSWORD (GitLab registry)
#   KUBE_CONFIG_DATA: base64 kubeconfig
#
stages:
  - lint
  - test
  - build
  - deploy

variables:
  SERVICES: "auth-service product-service order-service cart-service payment-service notification-service api-gateway"
  IMAGE_TAG: "$CI_COMMIT_SHORT_SHA"
  DOCKER_HOST: "tcp://docker:2375/"
  DOCKER_DRIVER: overlay2

before_script:
  - echo "Starting job for $CI_PROJECT_NAME at $CI_COMMIT_REF_NAME"

lint:
  stage: lint
  image: node:18
  script:
    - |
      for svc in $SERVICES; do
        if [ -f services/$svc/package.json ]; then
          echo "Linting $svc..."
          cd services/$svc
          if npm run | grep -q 'lint'; then
            npm ci
            npm run lint || true
          fi
          cd - >/dev/null
        fi
      done

unit-tests:
  stage: test
  image: node:18
  script:
    - |
      for svc in $SERVICES; do
        if [ -f services/$svc/package.json ]; then
          echo "Running tests for $svc..."
          cd services/$svc
          npm ci
          if npm run | grep -q 'test'; then
            npm test || echo "Tests failed for $svc (continuing)"
          fi
          cd - >/dev/null
        fi
      done

build-and-push:
  stage: build
  image: docker:24
  services:
    - docker:24-dind
  variables:
    DOCKER_TLS_CERTDIR: ""
  script:
    - docker info
    - echo "$REGISTRY_PASSWORD" | docker login -u "$REGISTRY_USERNAME" --password-stdin $REGISTRY
    - |
      for svc in $SERVICES; do
        if [ -f services/$svc/Dockerfile ]; then
          IMAGE="$REGISTRY/$svc:$IMAGE_TAG"
          echo "Building $IMAGE"
          docker build -t $IMAGE services/$svc
          echo "Pushing $IMAGE"
          docker push $IMAGE
        else
          echo "No Dockerfile for services/$svc. Skipping."
        fi
      done
  only:
    - main
  artifacts:
    paths:
      - pushed-images.txt
    expire_in: 1h

deploy:
  stage: deploy
  image:
    name: bitnami/kubectl:latest
  script:
    - echo "Decoding kubeconfig"
    - echo "$KUBE_CONFIG_DATA" | base64 --decode > kubeconfig
    - export KUBECONFIG=$PWD/kubeconfig
    - |
      for svc in $SERVICES; do
        IMAGE="$REGISTRY/$svc:$IMAGE_TAG"
        echo "Replacing images for $svc in YAMLs..."
        sed -i "s|IMAGE_${svc^^}|${IMAGE}|g" infra/kubernetes/*.yaml || true
        sed -i -E "s|(image:\\s*).*${svc}(:[a-zA-Z0-9._-]*)?\\b|\\1${IMAGE}|g" infra/kubernetes/*.yaml || true
      done
    - kubectl apply -f infra/kubernetes/namespace.yaml || true
    - kubectl apply -f infra/kubernetes/configmaps.yaml || true
    - kubectl apply -f infra/kubernetes/secrets.yaml || true
    - kubectl apply -R -f infra/kubernetes/
    - |
      for svc in $SERVICES; do
        kubectl -n default rollout status deploy/$svc --timeout=120s || echo "rollout check failed for $svc"
      done
  only:
    - main
